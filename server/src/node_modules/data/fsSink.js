const fs = require('fs')
const path = require('path');
const _ = require('lodash')
const auditDir = './.logs';
const requestDir = path.join(auditDir, 'requests');;
const pushRequestsDir = path.join(requestDir, 'pushes');;
const pullRequestsDir = path.join(requestDir, 'pulls');;

const openPushRequestsDir = path.join(pullRequestsDir, 'open');;
const closedPushRequestsDir = path.join(pullRequestsDir, 'closed');;


const responsessDir = path.join(auditDir, 'responses');;

const configure = () => {
  // Setup the directories
  if (!fs.existsSync(auditDir)) fs.mkdirSync(auditDir);
  if (!fs.existsSync(requestDir)) fs.mkdirSync(requestDir);
  if (!fs.existsSync(responsessDir)) fs.mkdirSync(responsessDir);  

  if (!fs.existsSync(pullRequestsDir)) fs.mkdirSync(pullRequestsDir);  
  if (!fs.existsSync(openPushRequestsDir)) fs.mkdirSync(openPushRequestsDir);  
  if (!fs.existsSync(closedPushRequestsDir)) fs.mkdirSync(closedPushRequestsDir);   
}

const getPushes = () => {
  const files = fs.readdirSync(pushRequestsDir);
  return _.chain(files).map(mapData).filter(x => x != null)
}

const getPush = (id) => {
  const filePath = path.join(pushRequestsDir, `${id}.json`);  
  const file = fs.readFileSync(filePath);
  return JSON.parse(file)
}

const mapData = (fileName) => {

  const filePath = path.join(pushRequestsDir, fileName);    
  const data = JSON.parse(fs.readFileSync(filePath));

  if (!data.open) {
    return;
  }

  return {
    id: data.timestamp,
    author: 'abc1234',      
    repo: data.repo.trim(),
    repoFullUrl: data.repoFullUrl,
    repoName: data.repoName,
    commitFrom: data.commit,
    commitTo: data.commit2,
    branch: data.branch,
    contentsCount: data.pack.meta.entries,
  }    
}

const writeAudit = (action) => {
  console.log(`WRITING AUDIT for ${action.id}, data = ${JSON.stringify(action)}`)
  const data = JSON.stringify(action, null, 2);  
  
  if (data.type === 'push') {
    if (data.open) fs.writeFileSync(`${openPushRequestsDir}/${action.id}.json`, data);
    
    if (data.closed) {

      // Delete the open file if it  exists
      if(fs.exists(`${openPushRequestsDir}/${action.id}.json`)) {
        fs.unlinkSync(`${openPushRequestsDir}/${action.id}.json`)
      }
      
      // Write this file to the closed place
      fs.writeFileSync(`${closedPushRequestsDir}/${action.id}.json`, data);    
    }
  } else {
    fs.writeFileSync(`${pullRequestsDir}/${action.id}.json`, data);
  }
}

module.exports.getPushes = getPushes;
module.exports.writeAudit = writeAudit;
module.exports.getPush = getPush;


// Configure all the directories 
configure()