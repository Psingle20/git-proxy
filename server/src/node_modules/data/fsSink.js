const fs = require('fs')
const path = require('path');
const _ = require('lodash')
const Action = require('proxy/actions').Action;
const auditDir = './.logs';
const errorDir = path.join(auditDir, 'errors');;
const responsessDir = path.join(auditDir, 'responses');;

const requestDir = path.join(auditDir, 'requests');;
const pushRequestsDir = path.join(requestDir, 'pushes');;
const pullRequestsDir = path.join(requestDir, 'pulls');;

const openPushRequestsDir = path.join(pushRequestsDir, 'open');;
const closedPushRequestsDir = path.join(pushRequestsDir, 'closed');;

const configure = () => {
  // Setup the directories
  if (!fs.existsSync(auditDir)) fs.mkdirSync(auditDir);
  if (!fs.existsSync(errorDir)) fs.mkdirSync(errorDir);
  
  if (!fs.existsSync(responsessDir)) fs.mkdirSync(responsessDir);  

  if (!fs.existsSync(requestDir)) fs.mkdirSync(requestDir);
  if (!fs.existsSync(pullRequestsDir)) fs.mkdirSync(pullRequestsDir);  
  if (!fs.existsSync(pushRequestsDir)) fs.mkdirSync(pushRequestsDir);  
  if (!fs.existsSync(openPushRequestsDir)) fs.mkdirSync(openPushRequestsDir);  
  if (!fs.existsSync(closedPushRequestsDir)) fs.mkdirSync(closedPushRequestsDir);   
}

const toClass = function(obj, proto) {
  obj.__proto__ = proto;
    return obj;
}   
 
const getPushes = () => {
  const files = fs.readdirSync(openPushRequestsDir);
  return _.chain(files).map(mapData).filter(x => x != null)
}

const getPush = (id) => {
  
  let file;

  if (fs.existsSync(`${openPushRequestsDir}/${id}.json`)) {
    file = fs.readFileSync(`${openPushRequestsDir}/${id}.json`);  
  } 
  else if (fs.existsSync(`${closedPushRequestsDir}/${actn.id}.json`)) {
    file = fs.readFileSync(`${closedPushRequestsDir}/${id}.json`);
  }
  else if (fs.existsSync(`${errorDir}/${id}.json`)) {
    file = fs.readFileSync(`${errorDir}/${id}.json`);    
  }  
  else { 
    return null;
  }

  const json = JSON.parse(file)    
  const action = toClass(json, Action.prototype);

  return action;
}

const mapData = (fileName) => {

  const filePath = path.join(pushRequestsDir, fileName);    
  const data = JSON.parse(fs.readFileSync(filePath));

  if (!data.open) {
    return;
  }

  return {
    id: data.timestamp,
    author: 'abc1234',      
    repo: data.repo.trim(),
    repoFullUrl: data.repoFullUrl,
    repoName: data.repoName,
    commitFrom: data.commit,
    commitTo: data.commit2,
    branch: data.branch,
    contentsCount: data.pack.meta.entries,
  }    
}

const writeAudit = (action) => {
  console.log(`WRITING AUDIT for ${action.id}, data = ${JSON.stringify(action)}`)
  const data = JSON.stringify(action, null, 2);  
  
  if (action.error) {
    fs.writeFileSync(`${errorDir}/${action.id}.json`, data);    
    return;
  }

  if (action.method === 'POST') {

    if (action.blocked) {
      fs.writeFileSync(`${openPushRequestsDir}/${action.id}.json`, data);
      return;
    }
    
    // Delete the open file if it  exists
    if(fs.existsSync(`${openPushRequestsDir}/${action.id}.json`)) {
      fs.unlinkSync(`${openPushRequestsDir}/${action.id}.json`)
    }      
  
    fs.writeFileSync(`${closedPushRequestsDir}/${action.id}.json`, data);    
  } 
  
  fs.writeFileSync(`${pullRequestsDir}/${action.id}.json`, data);
}

module.exports.getPushes = getPushes;
module.exports.writeAudit = writeAudit;
module.exports.getPush = getPush;

// Configure all the directories 
configure()